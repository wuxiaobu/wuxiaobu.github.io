<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go - Tag - 吴小布说</title>
        <link>http://localhost:1313/tags/go/</link>
        <description>Go - Tag - 吴小布说</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 15 Jan 2020 16:25:07 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>Go结构体</title>
    <link>http://localhost:1313/2020/01/go-struct/</link>
    <pubDate>Wed, 15 Jan 2020 16:25:07 &#43;0800</pubDate>
    <author>Wu Xiaobu</author>
    <guid>http://localhost:1313/2020/01/go-struct/</guid>
    <description><![CDATA[自定义类型 Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。
类型别名和自定义类型 在Go语言中有一些基本的数据类型，如string、整型、浮点型、布尔等数据类型， Go语言中可以使用type关键字来定义自定义类型。
自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：
1 2 //将MyInt定义为int类型 type MyInt int 通过type关键字的定义，MyInt就是一种新的类型，它具有int的特性。
类型别名 类型别名是Go1.9版本添加的新功能。
类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。
1 type TypeAlias = Type 我们之前见过的rune和byte就是类型别名，他们的定义如下：
1 2 type byte = uint8 type rune = int32 类型定义和类型别名的区别 类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。
1 2 3 4 5 6 7 8 9 10 11 12 13 //类型定义 type NewInt int //类型别名 type MyInt = int func main() { var a NewInt var b MyInt fmt.Printf(&#34;type of a:%T\n&#34;, a) //type of a:main.]]></description>
</item>
<item>
    <title>Go语言基础之基本数据类型</title>
    <link>http://localhost:1313/2020/01/go-string/</link>
    <pubDate>Fri, 10 Jan 2020 15:10:45 &#43;0800</pubDate>
    <author>Wu Xiaobu</author>
    <guid>http://localhost:1313/2020/01/go-string/</guid>
    <description><![CDATA[Go语言中有丰富的数据类型，除了基本的整型、浮点型、布尔型、字符串外，还有数组、切片、结构体、函数、map、通道（channel）等。Go 语言的基本类型和其他语言大同小异。
基本数据类型 整型 整型分为以下两个大类： 按长度分为：int8、int16、int32、int64 对应的无符号整型：uint8、uint16、uint32、uint64
其中，uint8就是我们熟知的byte型，int16对应C语言中的short型，int64对应C语言中的long型。
类型 描述 uint8 无符号 8位整型 (0 到 255) uint16 无符号 16位整型 (0 到 65535) uint32 无符号 32位整型 (0 到 4294967295) uint64 无符号 64位整型 (0 到 18446744073709551615) int8 有符号 8位整型 (-128 到 127) int16 有符号 16位整型 (-32768 到 32767) int32 有符号 32位整型 (-2147483648 到 2147483647) int64 有符号 64位整型 (-9223372036854775808 到 9223372036854775807) 特殊整型 类型 描述 uint 32位操作系统上就是uint32，64位操作系统上就是uint64 int 32位操作系统上就是int32，64位操作系统上就是int64 uintptr 无符号整型，用于存放一个指针 注意： 在使用int和 uint类型时，不能假定它是32位或64位的整型，而是考虑int和uint可能在不同平台上的差异。]]></description>
</item>
</channel>
</rss>
